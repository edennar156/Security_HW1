import sys
import binascii
import numpy as np

s_box = (
    0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
    0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
    0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
    0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
    0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
    0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
    0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
    0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
    0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
    0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
    0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
    0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
    0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
    0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
    0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
    0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16,
)

inv_s_box = (
    0x52, 0x09, 0x6A, 0xD5, 0x30, 0x36, 0xA5, 0x38, 0xBF, 0x40, 0xA3, 0x9E, 0x81, 0xF3, 0xD7, 0xFB,
    0x7C, 0xE3, 0x39, 0x82, 0x9B, 0x2F, 0xFF, 0x87, 0x34, 0x8E, 0x43, 0x44, 0xC4, 0xDE, 0xE9, 0xCB,
    0x54, 0x7B, 0x94, 0x32, 0xA6, 0xC2, 0x23, 0x3D, 0xEE, 0x4C, 0x95, 0x0B, 0x42, 0xFA, 0xC3, 0x4E,
    0x08, 0x2E, 0xA1, 0x66, 0x28, 0xD9, 0x24, 0xB2, 0x76, 0x5B, 0xA2, 0x49, 0x6D, 0x8B, 0xD1, 0x25,
    0x72, 0xF8, 0xF6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xD4, 0xA4, 0x5C, 0xCC, 0x5D, 0x65, 0xB6, 0x92,
    0x6C, 0x70, 0x48, 0x50, 0xFD, 0xED, 0xB9, 0xDA, 0x5E, 0x15, 0x46, 0x57, 0xA7, 0x8D, 0x9D, 0x84,
    0x90, 0xD8, 0xAB, 0x00, 0x8C, 0xBC, 0xD3, 0x0A, 0xF7, 0xE4, 0x58, 0x05, 0xB8, 0xB3, 0x45, 0x06,
    0xD0, 0x2C, 0x1E, 0x8F, 0xCA, 0x3F, 0x0F, 0x02, 0xC1, 0xAF, 0xBD, 0x03, 0x01, 0x13, 0x8A, 0x6B,
    0x3A, 0x91, 0x11, 0x41, 0x4F, 0x67, 0xDC, 0xEA, 0x97, 0xF2, 0xCF, 0xCE, 0xF0, 0xB4, 0xE6, 0x73,
    0x96, 0xAC, 0x74, 0x22, 0xE7, 0xAD, 0x35, 0x85, 0xE2, 0xF9, 0x37, 0xE8, 0x1C, 0x75, 0xDF, 0x6E,
    0x47, 0xF1, 0x1A, 0x71, 0x1D, 0x29, 0xC5, 0x89, 0x6F, 0xB7, 0x62, 0x0E, 0xAA, 0x18, 0xBE, 0x1B,
    0xFC, 0x56, 0x3E, 0x4B, 0xC6, 0xD2, 0x79, 0x20, 0x9A, 0xDB, 0xC0, 0xFE, 0x78, 0xCD, 0x5A, 0xF4,
    0x1F, 0xDD, 0xA8, 0x33, 0x88, 0x07, 0xC7, 0x31, 0xB1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xEC, 0x5F,
    0x60, 0x51, 0x7F, 0xA9, 0x19, 0xB5, 0x4A, 0x0D, 0x2D, 0xE5, 0x7A, 0x9F, 0x93, 0xC9, 0x9C, 0xEF,
    0xA0, 0xE0, 0x3B, 0x4D, 0xAE, 0x2A, 0xF5, 0xB0, 0xC8, 0xEB, 0xBB, 0x3C, 0x83, 0x53, 0x99, 0x61,
    0x17, 0x2B, 0x04, 0x7E, 0xBA, 0x77, 0xD6, 0x26, 0xE1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0C, 0x7D,
)

KEY_LENGTH = 16
BLOCK_SIZE = 16


def load_file(file_path):
    with open(file_path, "rb") as file:
        message_bin = file.read()

    # Ensure that message_bin size is a multiple of BLOCK_SIZE (16 bytes)
    assert len(message_bin) % BLOCK_SIZE == 0, "Message length should be a multiple of 16 bytes"

    # Divide the message into blocks of size BLOCK_SIZE (16 bytes)
    message_blocks = [message_bin[i:i + BLOCK_SIZE] for i in range(0, len(message_bin), BLOCK_SIZE)]

    # Convert each block into a 4x4 matrix of hexadecimal strings
    matrix_blocks = []
    for block in message_blocks:
        array_1d = np.frombuffer(block, dtype=np.uint8)

        # Convert each byte to a hexadecimal string
        hex_array = [binascii.hexlify(chunk).decode("utf-8") for chunk in array_1d]
        # Reshape the list of hexadecimal strings into a 4x4 matrix
        matrix_4x4 = np.array(hex_array).reshape((4, 4))

        matrix_blocks.append(matrix_4x4)
    return matrix_blocks


def readkey(key_path):
    with open(key_path, "rb") as file:
        # Read the contents of the file and store it as a string
        key = file.read()

    # Split the key into two 16-byte blocks
    k1 = key[:16]
    k2 = key[16:]
    all_keys = [k1, k2]

    # Convert each block into a 4x4 matrix of hexadecimal strings
    matrix_blocks = []
    for b in all_keys:
        array_1d = np.frombuffer(b, dtype=np.uint8)

        # Convert each byte to a hexadecimal string
        hex_array = [format(byte, '02x') for byte in array_1d]
        # Reshape the list of hexadecimal strings into a 4x4 matrix
        matrix_4x4 = np.array(hex_array).reshape((4, 4))

        matrix_blocks.append(matrix_4x4)
    return matrix_blocks[0], matrix_blocks[1]


def SubBytes(state):
    for i in range(len(state)):
        for j in range(len(state[i])):
            # Convert hex value to integer
            val = int(state[i][j], 16)
            # Apply S-box substitution
            substituted_val = s_box[val]
            # Convert substituted value back to hex
            state[i][j] = format(substituted_val, '02x')

    return state


def ShiftRows(state):
    for i in range(1, 4):
        state[i] = np.roll(state[i], -i)
    return state


def Rotate90ClockWise(state):
    # Transpose the matrix
    state = state.transpose()

    # Reverse each row
    for i in range(len(state)):
        state[i] = state[i][::-1]

    return state


def AddRoundKey(state, key):
    # Convert hexadecimal strings to integers, perform XOR, and convert back to hexadecimal strings
    result = np.zeros((4, 4), dtype=object)
    for i in range(4):
        for j in range(4):
            state_int = int(state[i, j], 16)
            key_int = int(key[i, j], 16)
            xor_result = state_int ^ key_int
            result[i, j] = hex(xor_result)[2:]  # remove '0x' prefix
            result[i, j] = result[i, j].zfill(len(state))

    return result


def InverseShiftRows(state):
    for i in range(1, 4):
        state[i] = np.roll(state[i], i)
    return state


def InverseRotate90ClockWise(state):
    # Transpose the matrix
    state = state.transpose()

    # Reverse each column
    for i in range(len(state)):
        state[:, i] = state[:, i][::-1]

    return state


def InSubBytes(state):
    for i in range(len(state)):
        for j in range(len(state[i])):
            # Convert hex value to integer
            val = int(state[i][j], 16)
            # Apply inverse S-box substitution
            substituted_val = inv_s_box[val]
            # Convert substituted value back to hex
            state[i][j] = format(substituted_val, '02x')

    return state


def single_round_encrypt(state, key):
    state = SubBytes(state)
    state = ShiftRows(state)
    state = Rotate90ClockWise(state)
    state = AddRoundKey(state, key)
    return state


def single_round_decrypt(state, key):
    state = AddRoundKey(state, key)
    state = InverseRotate90ClockWise(state)
    state = InverseShiftRows(state)
    state = InSubBytes(state)
    return state


def RotAES_encrypt(message_blocks, key1, key2):
    encrypted_blocks = []
    for block in message_blocks:
        state = block

        # Perform single round of RotAES encryption with key1
        state = single_round_encrypt(state, key1)

        # Perform single round of RotAES encryption with key2
        state = single_round_encrypt(state, key2)
        encrypted_blocks.append(state)

    return encrypted_blocks


def RotAES_decrypt(cipher_blocks, key1, key2):
    decrypted_blocks = []
    for block in cipher_blocks:
        state = block

        # Perform single round of RotAES decryption with key2
        state = single_round_decrypt(state, key2)

        # Perform single round of RotAES decryption with key1
        state = single_round_decrypt(state, key1)
        decrypted_blocks.append(state)

    return decrypted_blocks


def main():
    if len(sys.argv) != 5:
        print("Usage: python aes.py [-e|-d] <input file> <key file> <output file>")
        sys.exit(1)

    mode = sys.argv[1]
    input_path = sys.argv[2]
    key_path = sys.argv[3]
    output_path = sys.argv[4]

    message = load_file(input_path)
    key1, key2 = readkey(key_path)

    if mode == "-e":
        encrypted_blocks = RotAES_encrypt(message, key1, key2)
        with open(output_path, 'wb') as f:
            for block in encrypted_blocks:
                for row in block:
                    for byte in row:
                        f.write(bytes.fromhex(byte))
    elif mode == "-d":
        decrypted_blocks = RotAES_decrypt(message, key1, key2)
        with open(output_path, 'wb') as f:
            for block in decrypted_blocks:
                for row in block:
                    for byte in row:
                        f.write(bytes.fromhex(byte))
    else:
        print("Invalid mode. Use -e for encryption or -d for decryption.")
        sys.exit(1)


if __name__ == "__main__":
    main()
